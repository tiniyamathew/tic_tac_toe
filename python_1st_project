def outer(board):
    for i in board:
        print(" | ".join(i))
        print("-" * 5)
def check_winner(board, player):
    # Check rows
    for i in board:
        if all([cell == player for cell in i]):
            return True
    # Check columns
    for j in range(3):
        if all([board[i][j] == player for i in range(3)]):
            return True
    # Check diagonals
    if all([board[i][i] == player for k in range(3)]) or all([board[i][2 - i] == player for k in range(3)]):
        return True
    return False

def check_result(board):
    return all([cell != " " for row in board for cell in row])


def get_move():
    while True:
        try:
            row, col = map(int, input("Enter your move as 'row col': ").split())
            if row in [0, 1, 2] and col in [0, 1, 2]:
                return row, col
            else:
                print("Invalid input. Enter row and col as 0, 1, or 2.")
        except ValueError:
            print("Invalid input. Enter row and col as two integers separated by a space.")


def play_game():
    board = [[" " for _ in range(3)]]
    for _ in range(2):
        board.append([" " for _ in range(3)])

    current_player = "X"

    while True:
        outer(board)
        print(f"Player {current_player}'s turn.")

        while True:
            row, col = get_move()
            if board[row][col] == " ":
                board[row][col] = current_player
                break
            else:
                print("Cell already taken. Choose another cell.")

        if check_winner(board, current_player):
            outer(board)
            print(f"Player {current_player} wins!")
            break

        if check_result(board):
            outer(board)
            print("It's a draw!")
            break

        current_player = "O" if current_player == "X" else "X"


play_game()
